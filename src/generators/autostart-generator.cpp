/****************************************************************************
 * This file is part of Liri.
 *
 * Copyright (C) 2019 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
 *
 * $BEGIN_LICENSE:GPL3+$
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * $END_LICENSE$
 ***************************************************************************/

#include <QDir>
#include <QFile>
#include <QTextStream>

#include <LiriXdg/AutoStart>
#include <LiriXdg/DesktopFile>

void writeUnit(const Liri::DesktopFile &entry, const QString &unitDirName)
{
    QString sourcePath = entry.fileName();

    QFileInfo info(entry.fileName());
    QString id(info.fileName());
    id.replace(QStringLiteral(".desktop"), QString());
    id.replace(QLatin1Char('/'), QLatin1Char('-'));

    QString fileName = QStringLiteral("autostart-app-%1.service").arg(id);
    QDir unitDir(unitDirName);
    QString unitFileName(unitDir.absoluteFilePath(fileName));

    QStringList args = entry.expandExecString();
    QString exe = args.takeFirst();
    if (!exe.startsWith(QLatin1Char('/'))) {
        bool found = false;
        QStringList paths = {
            QStringLiteral("/usr/local/bin"),
            QStringLiteral("/usr/bin"),
            QStringLiteral("/bin"),
        };

        for (const auto &path : qAsConst(paths)) {
            QFileInfo fileInfo(QDir(path).absoluteFilePath(exe));
            if (fileInfo.exists()) {
                found = true;
                exe = fileInfo.absoluteFilePath();
                break;
            }
        }

        if (!found) {
            qCritical("Unable to find \"%s\" in any path, ignoring \"%s\"",
                      qPrintable(exe), qPrintable(sourcePath));
            return;
        }
    }
    args.prepend(exe);
    QString cmd = args.join(QLatin1Char(' '));

    QFile file(unitFileName);
    if (!file.open(QFile::WriteOnly | QFile::Text)) {
        qCritical("Failed to write to \"%s\": %s", qPrintable(unitFileName), qPrintable(file.errorString()));
        return;
    }

    QTextStream out(&file);

    out << "# Automatically generated by liri-session-autostart-generator\n\n";
    out << "[Unit]\n";
    out << "SourcePath=" << sourcePath << "\n";
    out << "Description=Application - " << entry.name() << ": " << entry.comment() << "\n";
    out << "StopWhenUnneeded=yes\n";
    out << "PartOf=liri-session.target\n";
    out << "Requires=liri-shell.target\n";
    out << "After=liri-shell.target\n";
    out << "\n";
    out << "[Service]\n";

    if (entry.isDBusActivatable()) {
        out << "Type=dbus\n";
        out << "BusName=" << id << "\n";
    } else {
        out << "Type=simple\n";
    }
    out << "ExecStart=" << cmd << "\n";
    out << "Restart=on-abnormal\n";

    file.close();
}

int main(int argc, char *argv[])
{
    if (argc != 4) {
        qCritical("Generator called with incorrect arguments");
        return 1;
    }

    QString unitDirName = QString::fromUtf8(argv[3]);

    const auto desktopFileList = Liri::AutoStart::desktopFileList();
    for (const Liri::DesktopFile &entry : desktopFileList) {
        // Ignore hidden entries
        if (!entry.isVisible())
            continue;

        // Ignore entries that are explicitely not meant for Liri
        if (!entry.isSuitable(QStringLiteral("X-Liri")))
            continue;

        // If it's neither suitable for GNOME nor KDE then it's probably not meant
        // for us too, some utilities like those from XFCE have an explicit list
        // of desktop that are not supported instead of show them on XFCE
        //if (!entry.isSuitable(true, QLatin1String("GNOME")) && !entry.isSuitable(true, QLatin1String("KDE")))
        //continue;

        writeUnit(entry, unitDirName);
    }

    return 0;
}
